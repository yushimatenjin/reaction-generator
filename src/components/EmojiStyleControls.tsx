import { motion } from 'framer-motion';
import { EmojiStyle, EmojiPreset } from '../types.ts';
import { PresetSelector } from './PresetSelector.tsx';
import { StyleSection, StyleControl, StyleSelect, StyleSlider, StyleColor, StyleToggle } from './StyleControl.tsx';

interface EmojiStyleControlsProps {
  style: EmojiStyle;
  onStyleChange: (style: EmojiStyle) => void;
  selectedPreset: EmojiPreset | null;
  onPresetSelect: (preset: EmojiPreset) => void;
}

export function EmojiStyleControls({ style, onStyleChange, selectedPreset, onPresetSelect }: EmojiStyleControlsProps) {
  const updateStyle = (updates: Partial<EmojiStyle>) => {
    onStyleChange({ ...style, ...updates });
  };

  return (
    <>
      <PresetSelector
        selectedPreset={selectedPreset}
        onPresetSelect={onPresetSelect}
      />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-lg p-6 mb-6 border border-gray-700"
      >
        <h3 className="text-lg font-semibold mb-6 text-white">„Çπ„Çø„Ç§„É´Ë®≠ÂÆö</h3>
        
        <div className="space-y-6">

          <StyleSection title="„Éï„Ç©„É≥„ÉàË®≠ÂÆö" icon="üî§">
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="„Éï„Ç©„É≥„Éà„Ç¶„Çß„Ç§„Éà">
                <StyleSelect
                  value={style.fontWeight}
                  onChange={(value) => updateStyle({ fontWeight: value })}
                  options={[
                    { value: '300', label: '300 - Light' },
                    { value: '400', label: '400 - Regular' },
                    { value: '500', label: '500 - Medium' },
                    { value: '700', label: '700 - Bold' },
                    { value: '900', label: '900 - Black' }
                  ]}
                />
              </StyleControl>
              
              <StyleControl label="„Éï„Ç©„É≥„Éà„Çπ„Çø„Ç§„É´">
                <StyleSelect
                  value={style.fontStyle}
                  onChange={(value) => updateStyle({ fontStyle: value })}
                  options={[
                    { value: 'normal', label: 'üî§ Normal' },
                    { value: 'italic', label: 'üé≠ Italic' }
                  ]}
                />
              </StyleControl>
            </div>
            
            <StyleControl label="„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫" value={style.fontSize} unit="px">
              <StyleSlider
                value={style.fontSize}
                onChange={(value) => updateStyle({ fontSize: value })}
                min={12}
                max={120}
              />
            </StyleControl>
          </StyleSection>


          <StyleSection title="Ëâ≤„ÉªÈÄèÊòéÂ∫¶" icon="üé®">
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="ËÉåÊôØËâ≤">
                <StyleColor
                  value={style.backgroundColor}
                  onChange={(value) => updateStyle({ backgroundColor: value })}
                />
              </StyleControl>
              
              <StyleControl label="ÊñáÂ≠óËâ≤">
                <StyleColor
                  value={style.textColor}
                  onChange={(value) => updateStyle({ textColor: value })}
                />
              </StyleControl>
            </div>
            
            <StyleControl label="ËÉåÊôØÈÄèÊòéÂ∫¶" value={Math.round(style.backgroundOpacity * 100)} unit="%">
              <StyleSlider
                value={style.backgroundOpacity}
                onChange={(value) => updateStyle({ backgroundOpacity: value })}
                min={0}
                max={1}
                step={0.01}
              />
              <div className="flex justify-between text-xs text-gray-400 mt-1">
                <span>ÈÄèÊòé</span>
                <span>‰∏çÈÄèÊòé</span>
              </div>
            </StyleControl>
          </StyleSection>

          <StyleSection title="ÂΩ¢Áä∂„Éª„É¨„Ç§„Ç¢„Ç¶„Éà" icon="üìê">
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="ÂΩ¢Áä∂">
                <StyleSelect
                  value={style.shape}
                  onChange={(value) => updateStyle({ shape: value as 'square' | 'circle' })}
                  options={[
                    { value: 'circle', label: 'üîµ ‰∏∏Âûã' },
                    { value: 'square', label: '‚¨ú Ëßí‰∏∏ÂõõËßí' }
                  ]}
                />
              </StyleControl>
              
              <StyleControl label="„É¨„Ç§„Ç¢„Ç¶„Éà">
                <StyleSelect
                  value={style.layout}
                  onChange={(value) => updateStyle({ layout: value as any })}
                  options={[
                    { value: 'auto', label: 'ü§ñ Ëá™Âãï' },
                    { value: 'single', label: '1Ô∏è‚É£ Âçò‰Ωì' },
                    { value: 'horizontal', label: '‚û°Ô∏è Ê®™‰∏¶„Å≥' },
                    { value: 'vertical', label: '‚¨áÔ∏è Á∏¶‰∏¶„Å≥' },
                    { value: 'grid', label: 'üî≤ „Ç∞„É™„ÉÉ„Éâ' }
                  ]}
                />
              </StyleControl>
            </div>
          </StyleSection>

          <StyleSection title="‰ΩôÁôΩ„Éª„Éú„Éº„ÉÄ„Éº" icon="üìè">
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="„Éë„Éá„Ç£„É≥„Ç∞" value={style.padding} unit="px">
                <StyleSlider
                  value={style.padding}
                  onChange={(value) => updateStyle({ padding: value })}
                  min={0}
                  max={30}
                />
              </StyleControl>
              
              <StyleControl label="„Éú„Éº„ÉÄ„ÉºÂπÖ" value={style.borderWidth} unit="px">
                <StyleSlider
                  value={style.borderWidth}
                  onChange={(value) => updateStyle({ borderWidth: value })}
                  min={0}
                  max={8}
                />
              </StyleControl>
            </div>
            
            <StyleControl label="„Éú„Éº„ÉÄ„ÉºËâ≤">
              <StyleColor
                value={style.borderColor}
                onChange={(value) => updateStyle({ borderColor: value })}
              />
            </StyleControl>
          </StyleSection>

          <StyleSection title="„Ç∑„É£„Éâ„Ç¶ÂäπÊûú" icon="üå´Ô∏è">
            <StyleToggle
              checked={style.shadowEnabled}
              onChange={(checked) => updateStyle({ shadowEnabled: checked })}
              label="üå´Ô∏è „Ç∑„É£„Éâ„Ç¶ÊúâÂäπ"
              id="shadowEnabled"
            />
            
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="„Ç∑„É£„Éâ„Ç¶Ëâ≤">
                <StyleColor
                  value={style.shadowColor}
                  onChange={(value) => updateStyle({ shadowColor: value })}
                  disabled={!style.shadowEnabled}
                />
              </StyleControl>
              
              <StyleControl label="„Ç∑„É£„Éâ„Ç¶„Åº„Åã„Åó" value={style.shadowBlur} unit="px">
                <StyleSlider
                  value={style.shadowBlur}
                  onChange={(value) => updateStyle({ shadowBlur: value })}
                  min={0}
                  max={20}
                  disabled={!style.shadowEnabled}
                />
              </StyleControl>
            </div>
          </StyleSection>

          <StyleSection title="„Éè„Ç§„É©„Ç§„ÉàÂäπÊûú" icon="‚ú®">
            <StyleToggle
              checked={style.highlightEnabled}
              onChange={(checked) => updateStyle({ highlightEnabled: checked })}
              label="‚ú® „ÉÜ„Ç´„É™„Éª„Éè„Ç§„É©„Ç§„Éà"
              id="highlightEnabled"
            />
            
            <StyleControl label="„Éè„Ç§„É©„Ç§„ÉàËâ≤">
              <StyleColor
                value={style.highlightColor}
                onChange={(value) => updateStyle({ highlightColor: value })}
                disabled={!style.highlightEnabled}
              />
            </StyleControl>
            
            <div className="grid grid-cols-2 gap-4">
              <StyleControl label="„Éè„Ç§„É©„Ç§„Éà„Çµ„Ç§„Ç∫" value={Math.round(style.highlightSize * 100)} unit="%">
                <StyleSlider
                  value={style.highlightSize}
                  onChange={(value) => updateStyle({ highlightSize: value })}
                  min={0.1}
                  max={0.8}
                  step={0.1}
                  disabled={!style.highlightEnabled}
                />
              </StyleControl>
              
              <StyleControl label="„Éè„Ç§„É©„Ç§„ÉàÈÄèÊòéÂ∫¶" value={Math.round(style.highlightOpacity * 100)} unit="%">
                <StyleSlider
                  value={style.highlightOpacity}
                  onChange={(value) => updateStyle({ highlightOpacity: value })}
                  min={0.1}
                  max={1.0}
                  step={0.1}
                  disabled={!style.highlightEnabled}
                />
              </StyleControl>
            </div>
          </StyleSection>
        </div>
      </motion.div>
    </>
  );
}